package model;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * This class is the base model class for an account object
 */
public class Account {

    /**
     * Account ID is auto-generated by a counter in the service
     */
    private long id;

    /**
     * Placeholder for maintaining current balance in the account
     */
    private BigDecimal balance;

    /**
     * Placeholder for list of credits (transactions)  to the account
     */
    private List<Transaction> credits;

    /**
     * Placeholder for list of debits (transactions) from the account
     */
    private List<Transaction> debits;

    /**
     * A dedicated lock for each account to manage concurrent updates
     */
    public transient final ReadWriteLock lock ;

    public Account(long id, BigDecimal balance) {
        this.id = id;
        this.balance = balance;
        this.credits = new ArrayList<>();
        this.debits = new ArrayList<>();
        this.lock = new ReentrantReadWriteLock();
    }

    public long getId() {
        return id;
    }

    /**
     * Fetches the current balance in the account
     * @return the current balance amount
     */
    public BigDecimal getBalance() {

        //Acquire lock
        this.lock.readLock().lock();
        try {
            //Read current balance
            return balance;
        }finally {
            //Release Lock
            this.lock.readLock().unlock();
        }
    }

    public List<Transaction> getCredits() {
        return credits;
    }


    public List<Transaction> getDebits() {
        return debits;
    }

    public ReadWriteLock getLock() {
        return lock;
    }

    /**
     *  Utility method to withdraw amount from this account
     * @param amount - The amount to be withdrawn from this account
     */
    public void withdrawAmount(BigDecimal amount){

        //Acquire Lock
        this.lock.writeLock().lock();

        try {
            //Deduct Balance
            this.balance = this.balance.subtract(amount);
        }finally {
            //Release Lock
            this.lock.writeLock().unlock();
        }

    }

    /**
     *  Utility method to deposit amount to this account
     * @param amount - The amount to be deposited to this account
     */
    public void depositAmount(BigDecimal amount){

        //Acquire Lock
        this.lock.writeLock().lock();

        try {
            //Add Balance
            this.balance = this.balance.add(amount);
        }finally {
            //Release Lock
            this.lock.writeLock().unlock();
        }
    }

}
